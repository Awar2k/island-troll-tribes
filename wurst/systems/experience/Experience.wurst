package Experience
import RegisterEvents
import PlayerExtensions
import MathUtils
import Classes

constant creepExp = [0, 25]
constant heroExp = [0, 100, 120, 160, 220, 300]

public function getMultiplier(unit troll) returns integer
    switch getTrollClassType(troll)
        case BASE_CLASS
            return 4
        case SUB_CLASS
            return 3
        case SUPER_CLASS
            return 2
        default
            return 1

init
    for i = 2 to 30
        creepExp[i] = creepExp[i - 1] + (i + 1) * 5

    for i = 6 to 30
        heroExp[i] = heroExp[i - 1] + 100

    for i = 0 to PLAYER_NEUTRAL_PASSIVE - 1
        players[i].setHandicapXP(0)

    registerPlayerUnitEvent(EVENT_PLAYER_UNIT_DEATH) ->
        let dead = GetDyingUnit()
        let killer = GetKillingUnit()
        if not killer.getOwner().isAllyOf(dead.getOwner())
            let heroes = GetUnitsInRangeMatching(1200, dead.getX(), dead.getY(), Condition(() -> begin
                let filterUnit = GetFilterUnit()
                return filterUnit.isType(UNIT_TYPE_HERO) and filterUnit.getOwner().isAllyOf(GetKillingUnit().getOwner())
            end))
            let count = heroes.size()
            let deadUnitLevel = dead.getLevel()

            let expReduction = dead.getOwner().getId() >= PLAYER_NEUTRAL_PASSIVE ?
                max(0.4, 0.9 - 0.1 * deadUnitLevel) :
                1.0

            for hero from heroes
                let multiplier = getMultiplier(hero)
                let baseExp = dead.isType(UNIT_TYPE_HERO) ? heroExp[deadUnitLevel] : creepExp[deadUnitLevel]
                let experience = floor(baseExp * multiplier / count) * expReduction
                hero.addXp(experience.toInt(), true)
