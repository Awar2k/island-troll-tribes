library ClassSelection requires ID, MapSetup, TimerUtils, Table {

	public force TEAM[13];
	unit trollTotem[12];
	unit picker[12];
	rect spawns[12];
	timerdialog selectionDialog;

	function getTribe(integer playerId) -> integer {
		integer ppt = GameConfig.getInstance().getNumPlayersPerTribe();
		return playerId / ppt;
	}

	struct Tribe {
		static TableArray tribeAvailableClasses;

		integer id;
		unit totem;
		rect spawn;

		public static method create(integer id, unit totem, rect spawn) -> thistype {
			thistype this = thistype.allocate();
			this.id = id;
			this.totem = totem;
			this.spawn = spawn;
			this.initializeTotem();
			TEAM[id + 1] = CreateForce();
			return this;
		}

		method initializeTotem() {
    		AddUnitToStock(totem, UNIT_HUNTER, 0, 1);
    		AddUnitToStock(totem, UNIT_BEAST_MASTER, 0, 1);
    		AddUnitToStock(totem, UNIT_MAGE, 0, 1);
    		AddUnitToStock(totem, UNIT_PRIEST, 0, 1);
    		AddUnitToStock(totem, UNIT_THIEF, 0, 1);
    		AddUnitToStock(totem, UNIT_SCOUT, 0, 1);
    		AddUnitToStock(totem, UNIT_GATHERER, 0, 1);
    		AddUnitToStock(totem, UNIT_REPICK_TROLL, 4, 4);
		}

		public static method find(integer id) -> thistype {
			return thistype(id + 1);
		}

		public static method ofPlayerId(integer pid) -> thistype {
			return thistype(getTribe(pid) + 1);
		}

		public method getForce() -> force {
			return TEAM[id + 1];
		}

		public method isClassAvailable(integer id) -> boolean {
			Table t = this.getAvailableClasses();
			return !t.has(id);
		}

		public method setClassAvailable(integer id) {
			Table t = this.getAvailableClasses();
			t.remove(id);
		}

		public method setClassUnavailable(integer id) {
			Table t = this.getAvailableClasses();
			t[id] = 1;
		}

		public method removeTotem() {
			RemoveUnit(totem);
		}

		public method getRandomAvailableClass() -> integer {
			integer i;
			integer uid = GameConfig.getInstance().getAllTrollUnitId();
			integer classId = GetRandomInt(0, 6);
			boolean anyRandomEnabled = GameConfig.getInstance().isOldRandomEnabled();
			Table availableClasses = this.getAvailableClasses();

			if (!GameConfig.getInstance().isAllTrollEnabled() || uid == 0) {
				for (0 <= i < 7) {
					uid = GetClassFromId(classId);
					if (anyRandomEnabled || this.isClassAvailable(uid)) {
						break;
					}
					classId = ModuloInteger(classId + 1, 7); 
				}
			}

			return uid;
		}

		method getAvailableClasses() -> Table {
			return tribeAvailableClasses[this.id];
		}

		static method onInit() {
			tribeAvailableClasses = TableArray[12];
		}
	}

	public Tribe tribes[12];

	function initializePlayerTroll(unit u) {
		player p = GetOwningPlayer(u);
		integer i = GetPlayerId(p);

		Tribe.ofPlayerId(i).setClassUnavailable(GetUnitTypeId(u));

		udg_PUnits[i] = u;
		udg_started[i] = true;
		SuspendHeroXP(u, true);
		PauseUnit(u, true);
		GroupAddUnit(udg_trolls, u);
    	UnitModifySkillPoints(u, -1);
    	SetPlayerState(p, PLAYER_STATE_RESOURCE_GOLD, udg_MAX_HEAT);

    	// TODO move to own module
    	if (GameConfig.getInstance().isStartWithFire()) {
    		UnitAddItem(u, CreateItem(ITEM_FIRE_KIT, 0, 0));
    	}

    	p = null;
    	u = null;
	}

	public function GetSpawn(integer playerId) -> rect {
		return spawns[getTribe(playerId)];
	}

	function releasePlayerTroll(unit u) {
		setUpSkillTriggers(u);
		SuspendHeroXP(u, false);
		PauseUnit(u, false);
    	SetPlayerHandicapXP(GetOwningPlayer(u), 4);
	}

	function onPick() {
    	RemoveUnitFromStock(GetSellingUnit(), GetUnitTypeId(GetSoldUnit()));
    	initializePlayerTroll(GetSoldUnit());
	}

	function onRepick() {
		player p = GetOwningPlayer(GetSoldUnit());
		integer pid = GetPlayerId(p);
		unit troll = udg_PUnits[pid];
		integer trollId = GetUnitTypeId(troll);

		Tribe.ofPlayerId(pid).setClassAvailable(trollId);

		RemoveUnit(GetSoldUnit());

		if (troll != null) {
			udg_PUnits[pid] = null;
	    	AddUnitToStock(GetSellingUnit(), trollId, 0, 1);
	        GroupRemoveUnit(udg_trolls, troll);
	        RemoveUnit(troll);
	        udg_started[pid] = false;
	        SetPlayerState(p, PLAYER_STATE_RESOURCE_LUMBER, 3);
    		SetPlayerState(p, PLAYER_STATE_RESOURCE_GOLD, 0);
	    }

		troll = null;
        p = null;
	}

	function onTrollSold() -> boolean {
	    if (GetUnitTypeId(GetSellingUnit()) == UNIT_TROLL_TOTEM) {
	    	if (GetUnitTypeId(GetSoldUnit()) == UNIT_REPICK_TROLL) {
	    		onRepick();
	    	} else {
	    		onPick();
	    	}
	    }

	    return false;
	}

	public function onSelectionTimeRunOut() {
		integer i;
		integer uid;
		unit u;
		rect spawn;

		for (0 <= i < 12) {
			Tribe.find(i).removeTotem();
		}

		for (0 <= i < 12) {
			RemoveUnit(picker[i]);

			if (GetPlayerSlotState(Player(i)) == PLAYER_SLOT_STATE_PLAYING && !isobserver[i]) {
				if (!udg_started[i]) {
					spawn = GetSpawn(i);
					uid = Tribe.ofPlayerId(i).getRandomAvailableClass();
					u = CreateUnit(Player(i), uid, GetRandomX(spawn), GetRandomY(spawn), 0.0);
					initializePlayerTroll(u);
	            }
	            else {
	            	u = udg_PUnits[i];
	            }

				SetFogStateRect(Player(i), FOG_OF_WAR_FOGGED, spawns[getTribe(i)], true);
	            releasePlayerTroll(u);
			}
		}

		TriggerExecute(gg_trg_boards);
		ReleaseTimer(GetExpiredTimer());
		TimerDialogDisplay(selectionDialog, false);
		DestroyTimerDialog(selectionDialog);
		GenerateMap();

		u = null;
		spawn = null;
	}

	public function StartClassSelection() {
		integer i, j;
		real x, y;
	    trigger trollSold = CreateTrigger();
	    timer selectionTimer = NewTimer();
	    integer selectionTimeAllowed = GameConfig.getInstance().getSelectionTimeAllowed();
		integer ppt = GameConfig.getInstance().getNumPlayersPerTribe();
		integer numTribes = GameConfig.getInstance().getNumTribes();
		integer maxOccupiedSlot = 0;
		integer maxOccupiedTribe = 0;
		rect tmpSpawn;
		unit tmpTotem;

		spawns[0] = gg_rct_revive_1;
		spawns[1] = gg_rct_revive_3;
		spawns[2] = gg_rct_revive_2;
		spawns[3] = gg_rct_revive_4;
		spawns[4] = gg_rct_revive_5;
		spawns[5] = gg_rct_revive_6;
		spawns[6] = gg_rct_revive_7;
		spawns[7] = gg_rct_revive_8;
		spawns[8] = gg_rct_revive_9;
		spawns[9] = gg_rct_revive_10;
		spawns[10] = gg_rct_revive_11;
		spawns[11] = gg_rct_revive_12;

		trollTotem[0] = CreateUnit(Player(PLAYER_NEUTRAL_PASSIVE), 'o00H', -4160.0, 2496.0, 0);
		trollTotem[1] = CreateUnit(Player(PLAYER_NEUTRAL_PASSIVE), 'o00H', 2048.0, -4544.0, 310);
		trollTotem[2] = CreateUnit(Player(PLAYER_NEUTRAL_PASSIVE), 'o00H', 4800.0, 2112.0, 280);
		trollTotem[3] = CreateUnit(Player(PLAYER_NEUTRAL_PASSIVE), 'o00H', -4736.0, -896.0, 310);
		trollTotem[4] = CreateUnit(Player(PLAYER_NEUTRAL_PASSIVE), 'o00H', 64.0, -1920.0, 310);
		trollTotem[5] = CreateUnit(Player(PLAYER_NEUTRAL_PASSIVE), 'o00H', 832.0, 4672.0, 310);
		trollTotem[6] = CreateUnit(Player(PLAYER_NEUTRAL_PASSIVE), 'o00H', -1472.0, 960.0, 310);
		trollTotem[7] = CreateUnit(Player(PLAYER_NEUTRAL_PASSIVE), 'o00H', -1856.0, -5184.0, 310);
		trollTotem[8] = CreateUnit(Player(PLAYER_NEUTRAL_PASSIVE), 'o00H', -5440.0, -5952.0, 310);
		trollTotem[9] = CreateUnit(Player(PLAYER_NEUTRAL_PASSIVE), 'o00H', 6976.0, -1728.0, 310);
		trollTotem[10] = CreateUnit(Player(PLAYER_NEUTRAL_PASSIVE), 'o00H', 7040.0, 5376.0, 310);
		trollTotem[11] = CreateUnit(Player(PLAYER_NEUTRAL_PASSIVE), 'o00H', -6848.0, 2432.0, 310);

		if (GameConfig.getInstance().isRandomSpawns()) {
			for (0 <= i < 12) {
				if (GetPlayerController(Player(i)) == MAP_CONTROL_USER &&
					GetPlayerSlotState(Player(i)) == PLAYER_SLOT_STATE_PLAYING) {
					maxOccupiedSlot = i;
				}
			}

			maxOccupiedTribe = getTribe(maxOccupiedSlot);

			for (0 <= i <= maxOccupiedTribe) {
				j = GetRandomInt(0, maxOccupiedTribe);
				tmpSpawn = spawns[i];
				spawns[i] = spawns[j];
				spawns[j] = tmpSpawn;
				tmpTotem = trollTotem[i];
				trollTotem[i] = trollTotem[j];
				trollTotem[j] = tmpTotem;
			}
		}

		for (0 <= i < 12) {
			tribes[i] = Tribe.create(i, trollTotem[i], spawns[i]);
		}

		for (0 <= i < 12) {
			for (0 <= j < 12) {
				if (i != j) {
					if (getTribe(i) == getTribe(j)) {
						SetPlayerAllianceStateBJ(Player(i), Player(j), bj_ALLIANCE_ALLIED_VISION);
					} else {
						SetPlayerAllianceStateBJ(Player(i), Player(j), bj_ALLIANCE_UNALLIED);
					}
				}
			}
		}

		for (0 <= i < 12) {
			if (GetPlayerSlotState(Player(i)) == PLAYER_SLOT_STATE_PLAYING) {
				if (isobserver[i]) {
					tmpTotem = trollTotem[getTribe(0)];
					x = GetUnitX(tmpTotem);
					y = GetUnitY(tmpTotem);
					if (GetLocalPlayer() == Player(i)) {
						SetCameraPosition(x, y);
					}
				} else {
					tmpTotem = trollTotem[getTribe(i)];
					x = GetUnitX(tmpTotem);
					y = GetUnitY(tmpTotem);
					picker[i] = CreateUnit(Player(i), UNIT_HERO_PICKER, x + 800, y + 800, 0);
					UnitShareVision(tmpTotem, Player(i), true);
					SetFogStateRect(Player(i), FOG_OF_WAR_VISIBLE, spawns[getTribe(i)], true);
					ForceAddPlayer(TEAM[getTribe(i) + 1], Player(i));
					if (GetLocalPlayer() == Player(i)) {
						SetCameraPosition(x, y);
					}
				}
			}
		}

		if (GameConfig.getInstance().isAllTrollEnabled()) {
			selectionTimeAllowed = 0;
		}
		else {
		    TriggerRegisterAnyUnitEventBJ(trollSold, EVENT_PLAYER_UNIT_SELL);
		    TriggerAddCondition(trollSold, Condition(function onTrollSold));

			TimerStart(NewTimer(), 0.1, false, function() {
				integer i;
				real x, y;
				unit totem;
				ReleaseTimer(GetExpiredTimer());
				for (0 <= i < 12) {
					totem = trollTotem[getTribe(i)];
					x = GetUnitX(totem);
					y = GetUnitY(totem);
					if (GetLocalPlayer() == Player(i)) {
						SelectUnitSingle(totem);
					}
				}
				totem = null;
			});

			DisplayTText(GENERAL_COLOR+"Choose a troll class|r", 40);
			DisplayTText(GENERAL_COLOR+"You will be appointed a random troll if you do not pick.|r", 40);
			DisplayTText(GENERAL_COLOR+"Type "+HIGHLIGHT_COLOR+"-repick|r"+GENERAL_COLOR+" to repick a troll.|r", 40);
		}

	    selectionDialog = CreateTimerDialog(selectionTimer);
	    TimerDialogSetTitle(selectionDialog, "Select Class");
	    TimerDialogDisplay(selectionDialog, true);
	    TimerStart(selectionTimer, selectionTimeAllowed, false, function onSelectionTimeRunOut);

		tmpSpawn = null;
		tmpTotem = null;
	}
}